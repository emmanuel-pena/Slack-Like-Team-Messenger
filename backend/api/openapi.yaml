#
# CSE183 Assignment 8 Backend
#

openapi: '3.0.3'

info:
  description: CSE183 Assignment 8 Backend
  version: 0.1.0
  title: CSE183 Assignment 8 Backend

servers:
  - url: http://localhost:3010/v0

paths:
  /login:
    post:
      description: Checks User
      requestBody:
        description: User to Check
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReq'
      responses:
        200:
          description: User exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authenticated'
        400:
          description: 400 means bad request
        401:
          description: Username or password incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user:
    post:
      description: Creates a new user
      requestBody:
        description: User to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        200:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Createduser'
        400:
          description: Submitted User has unexpected properties
        409:
          description: Conflict. User with email or user-name already exists
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /dummy:
    get:
      description: Dummy Endpoint
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DummyResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ua:
    get:
      description: Gets user account JSON from specified email
      parameters:
        - name: email
          in: query
          description: email of user
          schema:
            type: string
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
        404:
          description: UserAccount Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /channelschat:
    get:
      description: Gets channels from specified queries
      parameters:
        - name: ws
          in: query
          description: workspace
          schema:
            type: string
        - name: cn
          in: query
          description: channel name
          schema:
            type: string
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatLog'
        404:
          description: ChatLog Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      description: Posts to channel from specified info
      requestBody:
        description: info of stuff for adding
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReqChannels'
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatObj'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /dmschat:
    get:
      description: Gets chatlog from specified dms queries
      parameters:
        - name: id
          in: query
          description: id of user
          schema:
            type: string
        - name: idWith
          in: query
          description: id of with user
          schema:
            type: string
        - name: ws
          in: query
          description: workspace name
          schema:
            type: string
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatLog'
        404:
          description: ChatLog Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      description: Posts to dms from specified info
      requestBody:
        description: info of stuff for adding
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReqDms'
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatObj'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /dmdusers:
    get:
      description: Gets user info of users Dmd with
      parameters:
        - name: id
          in: query
          description: id of user
          schema:
            type: string
        - name: ws
          in: query
          description: workspace name
          schema:
            type: string
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersInfo'
        404:
          description: Uhh Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /channelslist:
    get:
      description: Gets list of channels from specified query
      parameters:
        - name: ws
          in: query
          description: current workspace
          schema:
            type: string
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelsList'
        404:
          description: ChannelsList Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      description: Adds a new channel to the current workspace
      requestBody:
        description: The new channel name being added and the current workspacename
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReqAddChannel'
      responses:
        201:
          description: Succesfully created a new channel
        400:
          description: Bad Request
        409:
          description: Channel with the same name in the workspace already exists
        500:
          description: Internal server error


  /workspaceslist:
    get:
      description: Gets list of workspaces from specified query
      parameters:
        - name: ident
          in: query
          description: ident of current user
          schema:
            type: string
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspacesList'
        404:
          description: WorkspacesObj Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      description: Creates a new workspace and adds it to user's workspaces
      requestBody:
        description: The new workspacename being added and the array of admin ids for it
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReqCreateWorkspace'
      responses:
        201:
          description: Succesfully created new workspace
        400:
          description: Bad Request
        409:
          description: Conflict. Workspace already exists
        500:
          description: Internal server error


  /userworkspaces:
    put:
      description: Adds a workspace to user's current workspaces
      requestBody:
        description: The new workspacename being added and the array of admin ids for it
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReqJoinWorkspace'
      responses:
        200:
          description: Succesfully joined new workspace
        400:
          description: Bad Request
        404:
          description: Workspace not found
        500:
          description: Internal server error

  /workspaceadmins/{ws}:
    get:
      description: Gets array of admins of current workspace
      parameters:
        - name: ws
          in: path
          description: current workspace
          schema:
            type: string
          required: true
      responses:
        200:
          description: Succesfully got admins of workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminsList'
        400:
          description: Bad Request


components:
  schemas:
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    NewUser:
      type: object
      additionalProperties: false
      properties:
        first:
          type: string
        last:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
          pattern: '(\w+|\d+)[^\s]+@(\w+|\d+)[^\s]*\.((\w+|\d+)[^\s]*){2,6}'
        password:
          type: string
          minLength: 5
      required:
        - username
        - email
        - password

    Createduser:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
      required:
        - id
        - username
        - email

    DummyResponse:
      required:
        - message
      properties:
        message:
          type: string

    Authenticated:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
        accessToken:
          type: string
        role:
          type: string
        workspaces:
           type: array
           items:
             $ref: '#/components/schemas/workspaceName'

    UserAccount:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        password:
          type: string
        email:
          type: string
          format: email
        workspaces:
           type: array
           items:
             $ref: '#/components/schemas/workspaceName'

    ChatLog:
      type: array
      items:
        $ref: '#/components/schemas/ChatObj'

    ChatObj:
      type: object
      properties:
        date:
          type: string
          format: date-time
        from:
          type: string
        content:
          type: string
        senderID:
          type: integer

    UsersInfo:
      type: array
      items:
        $ref: '#/components/schemas/UserObj'

    UserObj:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

    ChannelsList:
      type: array
      items:
        $ref: '#/components/schemas/channelName'

    channelName:
      type: string

    WorkspacesList:
      type: array
      items:
        $ref: '#/components/schemas/workspaceName'

    workspaceName:
      type: string

    ids:
      type: string

    AdminsList:
      type: array
      items:
        $ref: '#/components/schemas/ids'

    UserReq:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
      required:
        - password

    UserReqChannels:
      type: object
      properties:
        id:
          type: integer
        ws:
          type: string
        cn:
          type: string
        content:
          type: string
      required:
        - id
        - ws
        - cn
        - content

    UserReqAddChannel:
      type: object
      properties:
        channelName:
          type: string
        workspacename:
          type: string
      required:
        - channelName
        - workspacename

    UserReqCreateWorkspace:
      type: object
      properties:
        workspacename:
          type: string
        admins:
          type: array
          items:  
            $ref: '#/components/schemas/ids'
      required:
        - workspacename
        - admins

    UserReqJoinWorkspace:
      type: object
      properties:
        workspacename:
          type: string
        id:
          type: string
      required:
        - workspacename
        - id


    UserReqDms:
      type: object
      properties:
        id:
          type: integer
        idWith:
          type: integer
        ws:
          type: string
        content:
          type: string
      required:
        - id
        - ifWith
        - ws
        - content

    User:
      required:
        - password
        - email
      properties:
        password:
          type: string
        email:
          type: string
          format: email
      additionalProperties: false

# AUTHORIZATION COMPONENTS
#  securitySchemes:
 #   bearerAuth:            # arbitrary name for the security scheme
 #     type: http
 #     scheme: bearer
  #    bearerFormat: JWT    # optional, arbitrary value for documentation purposes

# Authorization - based on Professor's Books Auth
# security:
#  - bearerAuth: []         # use the same name as above